# argparse, hashlib, json, sys ve openai modüllerini içe aktar
import argparse
import hashlib
import json
import sys

from gpt_session import gptSession
from constants import CHATGPT, FILE_EXTENSIONS
from prompts import PromptGenerator

# pefile ve peutils modüllerini içe aktar
import pefile
import peutils


def get_imported_symbols(filename: str):
    imports = ""
    pe = pefile.PE(filename)
    imphash = pe.get_imphash() # PE dosyasının imza hash'ini hesaplar
    try:
        for entry in pe.DIRECTORY_ENTRY_IMPORT: # PE dosyasının içe aktarımlarını döngüye alır
            imports += entry.dll.decode('ascii') + ' ' # DLL adını imports string'ine ekler
            for imp in entry.imports: # DLL'nin içe aktardığı fonksiyonları döngüye alır
                imports += imp.name.decode('ascii') + ' ' # Fonksiyon adını imports string'ine ekler
    except:
        pass
    return imports, imphash # Imports string'ini ve imphash'i döndürür


def get_hashes(filename: str, imphash: str):
    """PE dosyasının SHA256 hash'ini hesaplar ve VT ve HA linklerini yazdırır."""
    with open(filename, "rb") as f: # PE dosyasını ikili modda okur
        content = f.read() # PE dosyasının içeriğini alır
    hash_object = hashlib.sha256(content) # SHA256 hash nesnesi oluşturur
    hex_dig = hash_object.hexdigest() # Hash nesnesinin onaltılık değerini alır
    print("[*] SHA256 search in vt:  {}: https://www.virustotal.com/gui/file/{}".format(filename, hex_dig)) # VT linkini yazdırır
    """print('Search imphash in web:  {}: https://www.hybrid-analysis.com/search?query=imphash:{}'.format(filename,
                                                                                                        imphash)) # HA linkini yazdırır"""
    return hex_dig # Hash nesnesinin onaltılık değerini döndürür


def generate_prompt(input: str, file_type: str) -> str:
    print("INPUTS:",input, file_type)
    if file_type in FILE_EXTENSIONS["tested"]["scripts"]:
        return PromptGenerator.script_anylze_in_json(input)
    elif file_type in FILE_EXTENSIONS["tested"]["PE"]:
        #print(input)
        return PromptGenerator.pe_anlyze_in_json(input)
    else:
        print("[!] Invalid file type")
        sys.exit(1)


def is_malware(prompt: str, gpt_session:gptSession):
	#response = json.loads(completion.choices[0].message.content) # Tamamlamanın içeriğini JSON olarak yükler
    response = gpt_session.send_message(prompt)
    print("JSON:", response)

    """if response['malware'] == '1': # Eğer zararlı ise
        print("[+] Malware detected!") # Zararlı olduğunu yazdırır
        print("[+] Reason:", response['reason']) # Sebebini yazdırır
        return True # True döndürür
    else: # Eğer zararlı değilse
        print(
            "[-] We did not find any signs of malware in that file. If you believe the file is not trustworthy, please check this data on VirusTotal.\n\thttps://www.virustotal.com/gui/home/search") # Zararlı olmadığını yazdırır
        return False # False döndürür"""

def read_file(filename: str):
	"""PE dosyasını okur ve içeriğini döndürür."""
	try:
		with open(filename, 'r') as filecode: # PE dosyasını metin modda okur
			data = filecode.read() # PE dosyasının içeriğini alır
		return data # İçeriği döndürür
	except FileNotFoundError: # Dosya bulunamazsa
		print(f'[!] I cant find the file named {filename}') # Hata mesajı yazdırır
	except: # Başka bir hata olursa
		print('[!] File read failed!') # Hata mesajı yazdırır


def get_file_features(filename):
    """PE dosyasının tüm özelliklerini döndürür."""
    features = {}

    # PE dosyasını oku
    pe = pefile.PE(filename)

    # PEiD imzalarını yükle
    signatures = peutils.SignatureDatabase("userdb.txt")

    # PE dosyasının imzasını eşleştir
    match = signatures.match(pe, ep_only=True)

    # Eşleşme varsa, paketleyici, şifreleyici veya derleyici bilgisini özelliklere ekle
    if match:
        print("[+] Signature match:", match[0])
        features["signature"] = match[0]

    # PE dosyasının özelliklerini çıkar
    features["number_of_sections"] = pe.FILE_HEADER.NumberOfSections # Bölüm sayısı
    features["size_of_code"] = pe.OPTIONAL_HEADER.SizeOfCode # Kod boyutu
    features["size_of_initialized_data"] = pe.OPTIONAL_HEADER.SizeOfInitializedData # Başlatılan veri boyutu
    features["size_of_uninitialized_data"] = pe.OPTIONAL_HEADER.SizeOfUninitializedData # Başlatılmayan veri boyutu
    features["address_of_entry_point"] = pe.OPTIONAL_HEADER.AddressOfEntryPoint # Giriş noktası adresi
    features["dll_characteristics"] = pe.OPTIONAL_HEADER.DllCharacteristics # DLL özellikleri

    #UNTESTED FEATURES - WILL BE ADDED LATER
    """ features["machine"] = pe.FILE_HEADER.Machine # PE dosyasının çalıştığı makine tipi
    features["time_date_stamp"] = pe.FILE_HEADER.TimeDateStamp # PE dosyasının oluşturulduğu veya değiştirildiği zaman damgası
    features["image_base"] = pe.OPTIONAL_HEADER.ImageBase # PE dosyasının yükleneceği taban adresi
    features["subsystem"] = pe.OPTIONAL_HEADER.Subsystem # PE dosyasının çalıştığı alt sistem
    features["checksum"] = pe.OPTIONAL_HEADER.CheckSum # PE dosyasının kontrol toplamı
    features["number_of_rva_and_sizes"] = pe.OPTIONAL_HEADER.NumberOfRvaAndSizes # PE dosyasının veri dizinleri sayısı
    features["data_directories"] = pe.OPTIONAL_HEADER.DATA_DIRECTORY # PE dosyasının veri dizinleri"""

    # Bölüm tablosundan özellikler çıkar
    section_features = []
    for section in pe.sections:
        section_features.append(section.Misc_VirtualSize) # Sanal boyut
        section_features.append(section.SizeOfRawData) # Ham veri boyutu
        section_features.append(section.Characteristics) # Bölüm özellikleri

    features["section_features"] = section_features

    return features


def analyze_malware(file_type: str, file_name: str, gpt_session:gptSession):
    if file_type in FILE_EXTENSIONS["tested"]["scripts"]:
        content = read_file(file_name)
        if content:
            prompt = generate_prompt(content, file_type)
            is_malware(prompt, gpt_session)

    elif file_type in FILE_EXTENSIONS["tested"]["PE"]:
        file_imports, file_imphash = get_imported_symbols(file_name)
        file_hash = get_hashes(file_name, file_imphash)
        file_features = get_file_features(file_name)
        all_features = {
            "file_imports": file_imports,
            "file_imphash": file_imphash,
            "file_hash": file_hash,
            "file_features": file_features
        }
        prompt = generate_prompt(str(all_features), file_type)
        is_malware(prompt, gpt_session)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Malware identification with OpenAI"
    )
    parser.add_argument("--file", help="Specify the full file name (e.g., --file script.py or --file test.exe)")
    parser.add_argument("--api_key", help="Specify the OpenAI API key (e.g., --api_key YOUR_API_KEY_HERE)")
    if len(sys.argv) == 1:
        parser.print_help(sys.stderr)
        sys.exit(1)
    
    args = parser.parse_args()

    if args.api_key:
        gpt_session = gpt_session = gptSession(args.api_key, CHATGPT.API_ENDPOINT)
    else:
        if CHATGPT.API_key != None:
            gpt_session = gptSession(CHATGPT.API_key, CHATGPT.API_ENDPOINT)
        else:
            print("[!] Please specify the OpenAI API key with --api_key or set the API_key variable in constants.py")
            sys.exit(1)
        
    
    if args.file:
        if "." in args.file:
            file_name = args.file
            file_type = args.file.split(".")[-1]
            print("[*] File name:", file_name)
            print("[*] File type:", file_type)
            print("[*] Analyzing file:", args.file)
            analyze_malware(file_type, file_name, gpt_session)
        else:
            print("[!] Invalid file type, missing file extension!")
            sys.exit(1)
    